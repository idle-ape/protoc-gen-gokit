// Code generated by protoc-gen-mixgo. DO NOT EDIT!

package example

import (
	"context"
	"time"

	"google.golang.org/grpc"
	"github.com/idle-ape/mixgo/metrics"
)

var (
	// DefaultServerCounterName default name for server counter
	DefaultServerCounterName = "server_counter"
	// DefaultServerHistogramName default name for server histogram
	DefaultServerHistogramName = "server_histogram"
)

// HelloWorldMetricsUnaryServerInterceptor server side unary interceptor for metrics collection
func HelloWorldMetricsUnaryServerInterceptor(ctx context.Context, req interface{}, info *grpc.UnaryServerInfo, handler grpc.UnaryHandler) (resp interface{}, err error) {
	// 统计接口耗时
	start := time.Now()
	defer func() {
		metrics.Histogram(DefaultServerHistogramName).WithLabelValues(info.FullMethod).Observe(time.Since(start).Seconds())
	}()
	// 统计QPS
	metrics.Counter(DefaultServerCounterName).WithLabelValues(info.FullMethod).Add(1)
	if resp, err = handler(ctx, req); err != nil {
		return nil, err
	}
	return resp, nil
}
